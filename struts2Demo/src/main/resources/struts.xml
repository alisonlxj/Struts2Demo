<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
        "http://struts.apache.org/dtds/struts-2.5.dtd">
        
<struts>

	<!-- 请求参数的编码方式 -->
    <constant name="struts.i18n.encoding" value="utf-8" />
    
    <!-- include节点是struts2中组件化的方式 可以将每个功能模块独立到一个xml配置文件中 然后用include节点引用 
    <include file="struts-default.xml"></include>
    -->
    
    <!-- package提供了将多个Action组织为一个模块的方式
        package的名字必须是唯一的 package可以扩展 当一个package扩展自另一个package时该package会在本身配置的基础上加入扩展的package 的配置 父package必须在子package前配置 
        name：package名称
        extends:继承的父package名称
        abstract:设置package的属性为抽象的 抽象的package不能定义action 值true:false
        namespace:定义package命名空间 该命名空间影响到url的地址，例如此命名空间为/test那么访问是的地址为http://localhost:8080/struts2/test/XX.action
        
        namespace：命名空间，唯一的，相当于房间号。可选项，省略情况下是“/”
        extends:继承
            extends=“struts-default”：struts2框架底层提供的核心包struts2-core-2.3.3.jar下的struts-default.xml文件
		            为什么要继承这个struts-default.xml文件
		                因为struts框架底层提供的struts-default.xml声明了所有的拦截器和拦截器栈。
		                我们知道struts2框架运行时执行struts-default.xml中的拦截器栈完成必要功能。
		                如果不继承struts-default.xml文件，就没有办法使用struts2提供的所有拦截器。
        
     -->
     
     <package name="com.alison.struts2" extends="struts-default">
     	
     	<interceptors>
     		<!-- 定义拦截器，name拦截器名，class拦截器类 -->
     		<interceptor name="" class=""></interceptor>
     		
     		<!-- 定义拦截器栈 
            <interceptor-stack name="mystack">
                <interceptor-ref name="timer"></interceptor-ref>
                <interceptor-ref name="logger"></interceptor-ref>
            </interceptor-stack>
            -->
     	</interceptors>
     	
     	 <!-- 定义默认的拦截器 每个Action都会自动引用;如果Action中引用了其它的拦截器 默认的拦截器将无效 
        <default-interceptor-ref name="mystack"></default-interceptor-ref>
     	-->
     	
     	<!-- 全局的result配置 
     	<global-results>
     		<result name="input">/error.jsp</result>
     	</global-results>
     	-->
     	
     	<global-allowed-methods></global-allowed-methods>
     	
     	<!--  <global-exception-mappings></global-exception-mappings>    --> 
     	
     	
     	 <!-- Action配置 一个Action可以被多次映射(只要action配置中的name不同)
             name：action名称
             class: 对应的类的路径
             method: 调用Action中的方法名
        -->
        <action name="addPerson" class="com.alison.struts2.AddPersonAction">
        	<!-- 引用拦截器
        	<interceptor-ref name=""></interceptor-ref>  -->
        	<!-- 节点配置
                name : result名称 和Action中返回的值相同
                type : result类型 不写则选用superpackage的type struts-default.xml中的默认为dispatcher
             -->
         	<result name="show" type="dispatcher">/showPerson.jsp</result>
         	<!-- 参数设置
         		name即属性值，相当于注射了，要求有get/set方法
         	 -->
         	<param name="url">www.baidu.com</param>
        </action>
        
        <action name="index" class="com.alison.struts2.IndexAction">
        	<result name="index">/index.jsp</result>
        </action>
     	
     </package>
    

</struts>






